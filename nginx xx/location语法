Location block 的基本语法形式是：

    location [=|~|~*|^~|@] pattern { ... }

[=|~|~*|^~|@] 被称作 location modifier ，这会定义 Nginx 如何去匹配其后的 pattern ，以及该 pattern 的最基本的属性（简单字符串或正则表达式）
被称作 location modifier 后面的uri 支持正则表示 例如 ^/abc 表示以/abc开头的  /abc$ 表示以/abc结尾

 

location modifier

1.=

Example:

server {

    server_name website.com;

    location = /abcd {

    […]

    }

}

匹配情况：

    http://website.com/abcd        # 正好完全匹配

    http://website.com/ABCD        # 如果运行 Nginx server 的系统本身对大小写不敏感，比如 Windows ，那么也匹配

    http://website.com/abcd?param1m2    # 忽略查询串参数（query string arguments），这里就是 /abcd 后面的 ?param1m2

    http://website.com/abcd/    # 不匹配，因为末尾存在反斜杠（trailing slash），Nginx 不认为这种情况是完全匹配

    http://website.com/abcde    # 不匹配，因为不是完全匹配

2. (None)

可以不写 location modifier ，Nginx 仍然能去匹配 pattern 。这种情况下，匹配那些以指定的 patern 开头的 URI，注意这里的 URI 只能是普通字符串，不能使用正则表达式。

Example:

server {

    server_name website.com;

    location /abcd {

    […]

    }

}

匹配情况：

    http://website.com/abcd        # 正好完全匹配

    http://website.com/ABCD        # 如果运行 Nginx server 的系统本身对大小写不敏感，比如 Windows ，那么也匹配

    http://website.com/abcd?param1m2    # 忽略查询串参数（query string arguments），这里就是 /abcd 后面的 ?param1m2

    http://website.com/abcd/    # 末尾存在反斜杠（trailing slash）也属于匹配范围内

    http://website.com/abcde    # 仍然匹配，因为 URI 是以 pattern 开头的

 

3. ~

这个 location modifier 对大小写敏感，且 pattern 须是正则表达式

Example:

server {

    server_name website.com;

    location ~ ^/abcd$ {

    […]

    }

}

匹配情况：

    http://website.com/abcd        # 完全匹配

    http://website.com/ABCD        # 不匹配，~ 对大小写是敏感的

    http://website.com/abcd?param1m2    # 忽略查询串参数（query string arguments），这里就是 /abcd 后面的 ?param1m2

    http://website.com/abcd/    # 不匹配，因为末尾存在反斜杠（trailing slash），并不匹配正则表达式 ^/abcd$

    http://website.com/abcde    # 不匹配正则表达式 ^/abcd$

注意：对于一些对大小写不敏感的系统，比如 Windows ，~ 和 ~* 都是不起作用的，这主要是操作系统的原因。

 

4. ~*

与 ~ 类似，但这个 location modifier 不区分大小写，pattern 须是正则表达式

Example:

server {

    server_name website.com;

    location ~* ^/abcd$ {

    […]

    }

}

匹配情况：

    http://website.com/abcd        # 完全匹配

    http://website.com/ABCD        # 匹配，这就是它不区分大小写的特性

    http://website.com/abcd?param1m2    # 忽略查询串参数（query string arguments），这里就是 /abcd 后面的 ?param1m2

    http://website.com/abcd/    # 不匹配，因为末尾存在反斜杠（trailing slash），并不匹配正则表达式 ^/abcd$

    http://website.com/abcde    # 不匹配正则表达式 ^/abcd$

 

5. ^~

匹配情况类似 2. (None) 的情况，以指定匹配模式开头的 URI 被匹配，不同的是，一旦匹配成功，那么 Nginx 就停止去寻找其他的 Location 块进行匹配了（与 Location 匹配顺序有关）

 

6. @

用于定义一个 Location 块，且该块不能被外部 Client 所访问，只能被 Nginx 内部配置指令所访问，比如 try_files or error_page

 

------- 搜索顺序以及生效优先级 -------

因为可以定义多个 Location 块，每个 Location 块可以有各自的 pattern 。因此就需要明白（不管是 Nginx 还是你），当 Nginx 收到一个请求时，它是如何去匹配 URI 并找到合适的 Location 的。

要注意的是，写在配置文件中每个 Server 块中的 Location 块的次序是不重要的，Nginx 会按 location modifier 的优先级来依次用 URI 去匹配 pattern ，顺序如下：

    1. =

    2. (None)    如果 pattern 完全匹配 URI（不是只匹配 URI 的头部）

    3. ^~

    4. ~ 或 ~*

    5. (None)    pattern 匹配 URI 的头部

 

 

7.匹配案例

location  = / {

  # 精确匹配 / ，主机名后面不能带任何字符串

  [ configuration A ] 

}

location  / {

  # 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求

  # 但是正则和最长字符串会优先匹配

  [ configuration B ] 

}

location /documents/ {

  # 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索

  # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条

  [ configuration C ] 

}

location ~ /documents/Abc {

  # 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索

  # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条

  [ configuration CC ] 

}

location ^~ /images/ {

  # 匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。

  [ configuration D ] 

}

location ~* \.(gif|jpg|jpeg)$ {

  # 匹配所有以 gif,jpg或jpeg 结尾的请求

  # 然而，所有请求 /images/ 下的图片会被 config D 处理，因为 ^~ 到达不了这一条正则

  [ configuration E ] 

}

location /images/ {

  # 字符匹配到 /images/，继续往下，会发现 ^~ 存在

  [ configuration F ] 

}

location /images/abc {

  # 最长字符匹配到 /images/abc，继续往下，会发现 ^~ 存在

  # F与G的放置顺序是没有关系的

  [ configuration G ] 

}

location ~ /images/abc/ {

  # 只有去掉 config D 才有效：先最长匹配 config G 开头的地址，继续往下搜索，匹配到这一条正则，采用

    [ configuration H ] 

}

location ~* /js/.*/\.js

 

 

顺序 no优先级：

(location =) > (location 完整路径) > (location ^~ 路径) > (location ~,~* 正则顺序) > (location 部分起始路径) > (/)

上面的匹配结果

按照上面的location写法，以下的匹配示例成立：

/ -> config A

精确完全匹配，即使/index.html也匹配不了

/downloads/download.html -> config B

匹配B以后，往下没有任何匹配，采用B

/images/1.gif -> configuration D

匹配到F，往下匹配到D，停止往下

/images/abc/def -> config D

最长匹配到G，往下匹配D，停止往下

你可以看到 任何以/images/开头的都会匹配到D并停止，FG写在这里是没有任何意义的，H是永远轮不到的，这里只是为了说明匹配顺序

/documents/document.html -> config C

匹配到C，往下没有任何匹配，采用C

/documents/1.jpg -> configuration E

匹配到C，往下正则匹配到E

/documents/Abc.jpg -> config CC

最长匹配到C，往下正则顺序匹配到CC，不会往下到E

 

8.实际使用建议

所以实际使用中，个人觉得至少有三个匹配规则定义，如下：

#直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。

#这里是直接转发给后端应用服务器了，也可以是一个静态首页

# 第一个必选规则

location = / {

    proxy_pass http://tomcat:8080/index

}

# 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项

# 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用

location ^~ /static/ {

    root /webroot/static/;

}

location ~* \.(gif|jpg|jpeg|png|css|js|ico)$ {

    root /webroot/res/;

}

#第三个规则就是通用规则，用来转发动态请求到后端应用服务器

#非静态文件请求就默认是动态请求，自己根据实际把握

location / {

    proxy_pass http://tomcat:8080/

}

alias root proxy_pass 的区别

root与alias主要区别在于nginx如何解释location后面的uri，这会使两者分别以不同的方式将请求映射到服务器文件上。
root的处理结果是：root路径＋location路径
alias的处理结果是：使用alias路径替换location路径
alias是一个目录别名的定义，root则是最上层目录的定义。
还有一个重要的区别是alias后面必须要用“/”结束，否则会找不到文件的。。。而root则可有可无~~

root实例：

location ^~ /t/ {
     root /www/root/html/;
}
如果一个请求的URI是/t/a.html时，web服务器将会返回服务器上的**/www/root/html/t/a.html**的文件。

alias实例：

location ^~ /t/ {
 alias /www/root/html/new_t/;
}
如果一个请求的URI是**/t/a.html时，web服务器将会返回服务器上的/www/root/html/new_t/a.html**的文件。注意这里是new_t，因为alias会把location后面配置的路径丢弃掉，把当前匹配到的目录指向到指定的目录。

使用alias时，目录名后面一定要加"/"。
alias在使用正则匹配时，必须捕捉要匹配的内容并在指定的内容处使用。
alias只能位于location块中。（root可以不放在location中）

proxy_pass实例

反向代理配置，用于代理请求，适用于前后端负载分离或多台机器、服务器负载分离的场景，在匹配到location配置的URL路径后，转发请求到【proxy_pass】配置的URL，是否会附加location配置路径与【proxy_pass】配置的路径后是否有"/“有关，有”/"则不附加，如：

# 注意 location后面 是加了/ 的  /test/   不加/出现的情况不完全一样 如 /test
1.加/
location /test/ 
{ 
proxy_pass http://127.0.0.1:8080/; 
}
即：请求/test/1.jpg（省略了协议与域名），将会被nginx转发请求到http://127.0.0.1:8080/1.jpg（未附加/test/路径）。

2. 不加/
location /test/ 
{ 
proxy_pass http://127.0.0.1:8080;  #不加/
}
即：请求/test/1.jpg（省略了协议与域名），将会被nginx转发请求到http://127.0.0.1:8080/test/1.jpg（附加/test/路径）。

3.代理加额外的uri  加 /
location /test/ 
{ 
    proxy_pass http://127.0.0.1:8080/haha/; 
}
即：请求/test/1.jpg（省略了协议与域名），将会被nginx转发请求到http://127.0.0.1:8080/haha/1.jpg（未附加/test/路径，但附加了/test/之后的路径）。

4.代理加额外的uri  不加 /
location /test/ 
{ 
    proxy_pass http://127.0.0.1:8080/haha; 
}
即：请求/test/1.jpg（省略了协议与域名），将会被nginx转发请求到http://127.0.0.1:8080/haha1.jpg（附加/test/路径，也附加了/test/之后的路径）。
